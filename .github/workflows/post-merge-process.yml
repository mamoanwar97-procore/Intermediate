name: Post Merge Process

on:
  push:
    branches:
      - main

jobs:
  process-pr-info:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install `yq` and `jq`
      - name: Install yq and jq
        run: |
          sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq
          yq --version
          sudo apt-get update
          sudo apt-get install -y jq
          jq --version

      # Step 3: Read and parse `pr_info.yml` data
      - name: Parse PR info
        id: parse_pr_info
        run: |
          if [ ! -f pr_info.yml ]; then
            echo "::error::pr_info.yml not found. Exiting."
            exit 1
          fi

          # Extract aggregator PR details
          PR_NAME=$(yq eval '.aggregator.pr_name' pr_info.yml)
          PR_NUMBER=$(yq eval '.aggregator.pr_number' pr_info.yml)

          # Extract sources into JSON
          # Convert sources to JSON array
          yq eval -o=json '.sources' pr_info.yml > sources.json
          # Debug: Print the contents of sources.json
          cat sources.json

          echo "PR_NAME=$PR_NAME" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      # Step 4: Insert into `translation_processes`
      - name: Insert into translation_processes (Bulk Insert)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          if [ ! -s sources.json ]; then
            echo "::error::sources.json is empty or missing."
            exit 1
          fi

          # Debug: Validate sources.json as JSON before processing
          jq . sources.json > /dev/null
          if [ $? -ne 0 ]; then
            echo "::error::sources.json is not valid JSON."
            exit 1
          fi

          # Debug: Print the contents of sources.json again
          echo "Contents of sources.json:"
          cat sources.json

          # Get the commit hash of the merge commit
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          # Prepare bulk data as a JSON array with proper escaping
          BULK_DATA=$(jq -c --arg pr_name "$PR_NAME" \
            --arg pr_number "$PR_NUMBER" \
            --arg commit_hash "$COMMIT_HASH" \
            '[.[] | { 
                pr_name: $pr_name, 
                pr_number: ($pr_number | tonumber), 
                source_repo_name: .repo_name, 
                source_pr_name: .pr_name, 
                source_pr_number: .pr_number,
                commit_hash: $commit_hash
            } ]' < sources.json)

          # Validate the constructed BULK_DATA
          echo "Validating BULK_DATA JSON:"
          echo "$BULK_DATA" | jq .

          # Send bulk data to Supabase
          RESPONSE=$(curl -s -X POST \
            "$SUPABASE_URL/rest/v1/translation_processes" \
            -H "Content-Type: application/json" \
            -H "apiKey: $SUPABASE_SERVICE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            --data "$BULK_DATA")

          echo "API response: $RESPONSE"

            # Check for status code in the response
            STATUS_CODE=$(echo "$RESPONSE" | jq -r '.status // empty')
            if [ "$STATUS_CODE" != "201" ]; then
              ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.message // "No message provided"')
              ERROR_DETAILS=$(echo "$RESPONSE" | jq -r '.details // "No additional details provided"')
              ERROR_HINT=$(echo "$RESPONSE" | jq -r '.hint // "No hints provided"')
              echo "::error::Failed to insert bulk data. Status Code: $STATUS_CODE, Message: $ERROR_MESSAGE, Details: $ERROR_DETAILS, Hint: $ERROR_HINT"
              exit 1
            else
            echo "::notice::Bulk data inserted successfully."
            fi
      # Step 5: Reset the `pr_info.yml` file
      - name: Reset pr_info.yml
        run: |
          > pr_info.yml
          if [ ! -s pr_info.yml ]; then
              echo "::notice::pr_info.yml successfully reset."
          else
              echo "::error::Failed to reset pr_info.yml."
              exit 1
          fi

# This workflow will be triggered manually
# and will run on the latest PR that is created by branch name that starts with `smart-ling`
# and will create a PR on the MFE repo with the changes.

name: Publish Translations

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR Number"
        required: true
        default: "0"

jobs:
  run-python-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.INTERMEDIATE_TOKEN }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "mamoanwar97-procore"
          git config --global user.email "mahmoud.m.anwar@procore.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install xmltodict
          pip install requests
          pip install PyGithub
          pip install gitpython
          pip install datetime

      - name: Run Python script
        env:
          GITHUB_TOKEN: ${{ secrets.INTERMEDIATE_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          REPO_NAME: ${{ github.repository }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: python publishTranslations.py

      # Extract commit hash from PR title
      - name: Extract Commit Hash from PR Title
        id: extract_commit_hash
        run: |
          # Get PR title
          PR_TITLE="${{ github.event.inputs.pr_number }}"
          # Extract the commit hash from the title (assuming it's after "commit" and separated by a space)
          COMMIT_HASH=$(echo "$PR_TITLE" | grep -oE 'commit\s[a-f0-9]{40}' | awk '{print $2}')
          if [ -z "$COMMIT_HASH" ]; then
            echo "COMMIT_HASH=" >> $GITHUB_ENV
            echo "hash_commit_exists=false" >> $GITHUB_ENV
          else
            echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
            echo "hash_commit_exists=true" >> $GITHUB_ENV
          fi

      # Checkout the repository
      - name: Checkout code
        if: env.hash_commit_exists == 'true'
        uses: actions/checkout@v3

      # Install jq
      - name: Install jq
        if: env.hash_commit_exists == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Update database records with commit hash, status, and delivered_at timestamp
      - name: Update Records in Supabase
        if: env.hash_commit_exists == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: |
          DELIVERED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          NEW_STATUS="DELIVERED"
          UPDATE_PAYLOAD=$(jq -n \
             --arg commit_hash "$COMMIT_HASH" \
                  --arg new_status "$NEW_STATUS" \
                  --arg delivered_at "$DELIVERED_AT" \
                  '{ 
                    commit_hash: $commit_hash, 
                    status: $new_status, 
                    delivered_at: $delivered_at
                  }')

          echo "Sending update payload: $UPDATE_PAYLOAD"

          # Send the update request to Supabase and capture HTTP status code
          RESPONSE=$(curl -s -o response_body.txt -w "%{http_code}" -X PATCH \
            "$SUPABASE_URL/rest/v1/translation_processes?commit_hash=eq.$COMMIT_HASH" \
            -H "Content-Type: application/json" \
            -H "apiKey: $SUPABASE_SERVICE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            --data "$UPDATE_PAYLOAD")

          echo "API response code: $RESPONSE"
          echo "Response body:"
          cat response_body.txt

          # Check if the response code is in the 200-299 range
          if [[ "$RESPONSE" =~ ^2[0-9]{2}$ ]]; then
            echo "::notice::Records updated successfully."
          else
            ERROR_MESSAGE=$(cat response_body.txt | jq -r '.message // "No message provided"')
            echo "::error::Failed to update records. HTTP Code: $RESPONSE, Message: $ERROR_MESSAGE"
            exit 1
          fi

      # - name: Open PR
      #   uses: rematocorp/open-pull-request-action@v1
      #   with:
      #     github-token: ${{ secrets.INTERMEDIATE_TOKEN }}
      #     from-branch: translations-collection-${{ github.run_number }}
      #     to-branch: MFE_en
      #     repository-owner: mamoanwar97-procore
      #     repository: Intermediate

name: Post Merge Process

on:
  push:
    branches:
      - main

jobs:
  process-pr-info:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Read and parse `pr_info` data
      - name: Parse PR info
        id: parse_pr_info
        run: |
          if [ ! -f pr_info.txt ]; then
            echo "::error::pr_info.txt not found. Exiting."
            exit 1
          fi

          # Read aggregator PR details (first line)
          AGGREGATOR_LINE=$(head -n 1 pr_info.txt)
          if [ -z "$AGGREGATOR_LINE" ]; then
            echo "::error::Aggregator line is missing in pr_info.txt. Exiting."
            exit 1
          fi
          IFS=',' read -r PR_NAME PR_NUMBER <<< "$AGGREGATOR_LINE"

          # Read and parse source PR details (remaining lines)
          SOURCE_LINES=$(tail -n +2 pr_info.txt)
          if [ -z "$SOURCE_LINES" ]; then
            echo "::warning::No source PRs found in pr_info.txt."
            echo "[]" > source.json
          else
            echo "$SOURCE_LINES" | awk -F'|' '
              BEGIN { print "[" }
              {
                for (i = 1; i <= NF; i++) {
                  split($i, fields, ",");
                  printf "%s{\"repo_name\": \"%s\", \"pr_name\": \"%s\", \"pr_number\": \"%s\"}",
                  (i > 1 ? "," : ""),
                  fields[1], fields[2], fields[3];
                }
              }
              END { print "]" }
            ' > source.json
          fi

          echo "PR_NAME=$PR_NAME" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      # Step 3: Insert into `translation_processes`
      - name: Insert into translation_processes
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          if [ ! -s source.json ]; then
            echo "::error::source.json is empty or missing."
            exit 1
          fi

          # Read and send each record
          jq -c '.[]' source.json | while read -r SOURCE; do
            SOURCE_PR_NAME=$(echo "$SOURCE" | jq -r '.pr_name')
            SOURCE_PR_NUMBER=$(echo "$SOURCE" | jq -r '.pr_number')
            SOURCE_REPO_NAME=$(echo "$SOURCE" | jq -r '.repo_name')

            PAYLOAD=$(jq -n \
              --arg pr_name "$PR_NAME" \
              --arg pr_number "$PR_NUMBER" \
              --arg source_pr_name "$SOURCE_PR_NAME" \
              --arg source_pr_number "$SOURCE_PR_NUMBER" \
              --arg source_repo_name "$SOURCE_REPO_NAME" \
              '{
                pr_name: $pr_name,
                pr_number: ($pr_number | tonumber),
                source_pr_name: $source_pr_name,
                source_pr_number: ($source_pr_number | tonumber),
                source_repo_name: $source_repo_name
              }')

            echo "Sending payload: $PAYLOAD"

            RESPONSE=$(curl -s -X POST \
              "$SUPABASE_URL/rest/v1/translation_processes" \
              -H "Content-Type: application/json" \
              -H "apiKey: $SUPABASE_SERVICE_KEY" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
              -d "$PAYLOAD")

            echo "API response: $RESPONSE"

            if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
              echo "::error::Failed to insert record: $RESPONSE"
              exit 1
            else
              echo "::notice::Record inserted successfully for $SOURCE_PR_NAME."
            fi
          done

      # Step 4: Reset the `pr_info.txt` file
      - name: Reset pr_info file
        run: |
          > pr_info.txt
          if [ ! -s pr_info.txt ]; then
              echo "::notice::pr_info.txt successfully reset."
          else
              echo "::error::Failed to reset pr_info.txt."
              exit 1
          fi
